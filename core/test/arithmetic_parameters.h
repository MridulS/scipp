// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (c) 2021 Scipp contributors (https://github.com/scipp)
// clang-format off
/*
 * This file was automatically generated by

import sys

import numpy as np


def build_param(a, b):
    return f'Params{{{a}, {b}, {np.true_divide(a, b)},' + \
           f' {np.floor_divide(a, b)}, {np.remainder(a, b)}}}'


np.random.seed(14653503)
with open(sys.argv[1], 'w') as outf:
    outf.write('// SPDX-License-Identifier: GPL-3.0-or-later\n')
    outf.write('// Copyright (c) 2021 Scipp contributors (https://github.com/scipp)\n')
    outf.write('// clang-format off\n')
    outf.write('/' + '*\n * This file was automatically generated by\n\n')
    outf.write(open(__file__, 'r').read())
    outf.write('\n *' + '/\n\n')

    outf.write('#include <array>\n\n')

    outf.write('namespace {\n')

    outf.write('template <class Params>\n')
    outf.write('auto division_params_int_int() {\n')
    outf.write('return std::array{\n')
    for a in range(2, -3, -1):
        for b in range(4, -5, -1):
            if b == 0:
                continue
            outf.write(build_param(a, b) + ',\n')
    outf.write('};\n')
    outf.write('}\n')

    outf.write('template <class Params>\n')
    outf.write('auto division_params_float_float() {\n')
    outf.write('return std::array{\n')
    dividends, divisors = np.random.uniform(-4, 4, (2, 40))
    while np.any(divisors == 0):
        divisors = np.random.uniform(-4, 4, 40)
    for a, b in zip(*(dividends, divisors)):
        outf.write(build_param(a, b) + ',\n')
    outf.write('};\n')
    outf.write('}\n')

    outf.write('} // namespace\n')
    outf.write('// clang-format on\n')
 */

#include <array>

namespace {
template <class Params>
auto division_params_int_int() {
return std::array{
Params{2, 4, 0.5, 0, 2},
Params{2, 3, 0.6666666666666666, 0, 2},
Params{2, 2, 1.0, 1, 0},
Params{2, 1, 2.0, 2, 0},
Params{2, -1, -2.0, -2, 0},
Params{2, -2, -1.0, -1, 0},
Params{2, -3, -0.6666666666666666, -1, -1},
Params{2, -4, -0.5, -1, -2},
Params{1, 4, 0.25, 0, 1},
Params{1, 3, 0.3333333333333333, 0, 1},
Params{1, 2, 0.5, 0, 1},
Params{1, 1, 1.0, 1, 0},
Params{1, -1, -1.0, -1, 0},
Params{1, -2, -0.5, -1, -1},
Params{1, -3, -0.3333333333333333, -1, -2},
Params{1, -4, -0.25, -1, -3},
Params{0, 4, 0.0, 0, 0},
Params{0, 3, 0.0, 0, 0},
Params{0, 2, 0.0, 0, 0},
Params{0, 1, 0.0, 0, 0},
Params{0, -1, -0.0, 0, 0},
Params{0, -2, -0.0, 0, 0},
Params{0, -3, -0.0, 0, 0},
Params{0, -4, -0.0, 0, 0},
Params{-1, 4, -0.25, -1, 3},
Params{-1, 3, -0.3333333333333333, -1, 2},
Params{-1, 2, -0.5, -1, 1},
Params{-1, 1, -1.0, -1, 0},
Params{-1, -1, 1.0, 1, 0},
Params{-1, -2, 0.5, 0, -1},
Params{-1, -3, 0.3333333333333333, 0, -1},
Params{-1, -4, 0.25, 0, -1},
Params{-2, 4, -0.5, -1, 2},
Params{-2, 3, -0.6666666666666666, -1, 1},
Params{-2, 2, -1.0, -1, 0},
Params{-2, 1, -2.0, -2, 0},
Params{-2, -1, 2.0, 2, 0},
Params{-2, -2, 1.0, 1, 0},
Params{-2, -3, 0.6666666666666666, 0, -2},
Params{-2, -4, 0.5, 0, -2},
};
}
template <class Params>
auto division_params_float_float() {
return std::array{
Params{2.036063356701181, 3.4833025322291125, 0.58452096476335, 0.0, 2.036063356701181},
Params{3.6016315516446227, -0.9253845587745246, -3.892037658823937, -4.0, -0.09990668345347586},
Params{2.2141557922000628, 0.15971374240318958, 13.863276627821632, 13.0, 0.13787714095859815},
Params{2.5374896469549943, 2.445320987246353, 1.0376918450335764, 1.0, 0.09216865970864152},
Params{0.7656644556459105, 2.0053006157923274, 0.3818202865027216, 0.0, 0.7656644556459105},
Params{0.5671878818462757, 1.4852561779955264, 0.38187882349814, 0.0, 0.5671878818462757},
Params{-2.4841758636764384, 1.679279028215464, -1.4793109554380144, -2.0, 0.8743821927544895},
Params{2.7095280442020915, 3.719475516526087, 0.7284704610000322, 0.0, 2.7095280442020915},
Params{-2.165829509979859, 1.5839878515994226, -1.3673270964754718, -2.0, 1.0021461932189863},
Params{-3.5756533291263795, 3.1958788478318736, -1.1188325651180895, -2.0, 2.8161043665373677},
Params{-1.9252668362272694, -3.58994690112167, 0.5362939590069492, 0.0, -1.9252668362272694},
Params{0.9902135214523495, 1.6206452639025821, 0.6109995466052044, 0.0, 0.9902135214523495},
Params{-2.9046772223094086, -1.051961499592264, 2.761201073837065, 2.0, -0.8007542231248808},
Params{-2.465430374168501, 3.0493922234256887, -0.8084989379945474, -1.0, 0.5839618492571876},
Params{0.0761763854355868, -0.8579436431269585, -0.08878949805834067, -1.0, -0.7817672576913717},
Params{-0.47355952812192204, -0.6594721604273284, 0.7180887329877009, 0.0, -0.47355952812192204},
Params{-1.3212887065958956, -0.06209040118099285, 21.280080035951986, 21.0, -0.01739028179504576},
Params{1.7958842533895139, 3.465052883152337, 0.518284803710039, 0.0, 1.7958842533895139},
Params{-3.5830025791181734, 0.26790701113108106, -13.374053049194329, -14.0, 0.16769557671696145},
Params{0.9156876277262098, -3.325048808721508, -0.27539073270876124, -1.0, -2.4093611809952984},
Params{0.4331864689175351, -0.7831912683452753, -0.553104313627973, -1.0, -0.3500047994277402},
Params{-1.4840992321894992, 1.6698554951895739, -0.8887590791327807, -1.0, 0.18575626300007464},
Params{3.444863663823729, 1.8986444203222579, 1.8143806322823894, 1.0, 1.5462192435014712},
Params{1.0062636822885862, -0.4450504430908513, -2.2610104043490873, -3.0, -0.32888764698396766},
Params{-1.8126280643257484, 1.6121333481089906, -1.124366086993942, -2.0, 1.4116386318922327},
Params{-0.3845619969340621, 2.504480681309195, -0.1535495960515997, -1.0, 2.1199186843751328},
Params{-3.6042825587616907, 0.8008833074486779, -4.500384169878156, -5.0, 0.4001339784816986},
Params{2.6735480603467012, 2.7835798889574495, 0.9604711080694152, 0.0, 2.6735480603467012},
Params{1.2370124178465982, -1.0392069501733259, -1.190342710506585, -2.0, -0.8414014825000535},
Params{0.14082549631390417, 0.8089465429174068, 0.1740850462207642, 0.0, 0.14082549631390417},
Params{-1.8829058316915939, 2.653959652229804, -0.709470405893177, -1.0, 0.77105382053821},
Params{-0.19679165531091858, -3.850133820446165, 0.05111293905314537, 0.0, -0.19679165531091858},
Params{2.8264249136141215, 0.7025566827574723, 4.023056050823765, 4.0, 0.016198182584232335},
Params{0.9249722784165719, -2.1466336813700337, -0.43089432838221015, -1.0, -1.2216614029534618},
Params{-3.220943670971274, 1.3807985441110153, -2.3326673428997418, -3.0, 0.9214519613617718},
Params{-1.9108245016632015, -1.7730507845290537, 1.0777043265406199, 1.0, -0.13777371713414777},
Params{1.4996678697798531, -3.4111700728395364, -0.4396344473471225, -1.0, -1.9115022030596833},
Params{1.034374655171237, 3.994465157960298, 0.2589519783668414, 0.0, 1.034374655171237},
Params{-3.7636846234352452, 0.11346385156105132, -33.17078145730074, -34.0, 0.09408632964049968},
Params{3.4604881346236107, -0.8325787104292601, -4.156349533414631, -5.0, -0.7024054175226899},
};
}
} // namespace
// clang-format on
