// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (c) 2021 Scipp contributors (https://github.com/scipp)
// clang-format off
/*
 * This file was automatically generated by

from itertools import product
import sys

import numpy as np


def format_number(x):
    if np.isposinf(x):
        return 'INFINITY'
    if np.isneginf(x):
        return '-INFINITY'
    if np.isnan(x):
        return f'{"-" if np.sign(x) == -1 else ""}NAN'
    return f'{x}'


def build_param(a, b):
    return f'Params{{{a}, {b}, {format_number(np.true_divide(a, b))},' + \
           f' {format_number(np.floor_divide(a, b))}, {format_number(np.remainder(a, b))}}}'


np.random.seed(14653503)
with open(sys.argv[1], 'w') as outf:
    outf.write('// SPDX-License-Identifier: GPL-3.0-or-later\n')
    outf.write('// Copyright (c) 2021 Scipp contributors (https://github.com/scipp)\n')
    outf.write('// clang-format off\n')
    outf.write('/' + '*\n * This file was automatically generated by\n\n')
    outf.write(open(__file__, 'r').read())
    outf.write('\n *' + '/\n\n')

    outf.write('#include <array>\n\n')
    outf.write('#include <cmath>\n\n')

    outf.write('namespace {\n')

    name_and_gen = (("int", lambda: np.arange(3, -4, -1)),
                    ("float", lambda: np.random.uniform(-10, 10, 5)))
    for (a_name, a_gen), (b_name, b_gen) in product(name_and_gen, name_and_gen):
        outf.write('template <class Params>\n')
        outf.write(f'constexpr inline auto division_params_{a_name}_{b_name} = std::array{{\n')
        for a, b in product(a_gen(), b_gen()):
            outf.write(build_param(a, b) + ',\n')
        outf.write('};\n')

    outf.write('} // namespace\n')
    outf.write('// clang-format on\n')

 */

#include <array>

#include <cmath>

namespace {
template <class Params>
constexpr inline auto division_params_int_int = std::array{
Params{3, 3, 1.0, 1, 0},
Params{3, 2, 1.5, 1, 1},
Params{3, 1, 3.0, 3, 0},
Params{3, 0, INFINITY, 0, 0},
Params{3, -1, -3.0, -3, 0},
Params{3, -2, -1.5, -2, -1},
Params{3, -3, -1.0, -1, 0},
Params{2, 3, 0.6666666666666666, 0, 2},
Params{2, 2, 1.0, 1, 0},
Params{2, 1, 2.0, 2, 0},
Params{2, 0, INFINITY, 0, 0},
Params{2, -1, -2.0, -2, 0},
Params{2, -2, -1.0, -1, 0},
Params{2, -3, -0.6666666666666666, -1, -1},
Params{1, 3, 0.3333333333333333, 0, 1},
Params{1, 2, 0.5, 0, 1},
Params{1, 1, 1.0, 1, 0},
Params{1, 0, INFINITY, 0, 0},
Params{1, -1, -1.0, -1, 0},
Params{1, -2, -0.5, -1, -1},
Params{1, -3, -0.3333333333333333, -1, -2},
Params{0, 3, 0.0, 0, 0},
Params{0, 2, 0.0, 0, 0},
Params{0, 1, 0.0, 0, 0},
Params{0, 0, NAN, 0, 0},
Params{0, -1, -0.0, 0, 0},
Params{0, -2, -0.0, 0, 0},
Params{0, -3, -0.0, 0, 0},
Params{-1, 3, -0.3333333333333333, -1, 2},
Params{-1, 2, -0.5, -1, 1},
Params{-1, 1, -1.0, -1, 0},
Params{-1, 0, -INFINITY, 0, 0},
Params{-1, -1, 1.0, 1, 0},
Params{-1, -2, 0.5, 0, -1},
Params{-1, -3, 0.3333333333333333, 0, -1},
Params{-2, 3, -0.6666666666666666, -1, 1},
Params{-2, 2, -1.0, -1, 0},
Params{-2, 1, -2.0, -2, 0},
Params{-2, 0, -INFINITY, 0, 0},
Params{-2, -1, 2.0, 2, 0},
Params{-2, -2, 1.0, 1, 0},
Params{-2, -3, 0.6666666666666666, 0, -2},
Params{-3, 3, -1.0, -1, 0},
Params{-3, 2, -1.5, -2, 1},
Params{-3, 1, -3.0, -3, 0},
Params{-3, 0, -INFINITY, 0, 0},
Params{-3, -1, 3.0, 3, 0},
Params{-3, -2, 1.5, 1, -1},
Params{-3, -3, 1.0, 1, 0},
};
template <class Params>
constexpr inline auto division_params_int_float = std::array{
Params{3, 5.0901583917529525, 0.5893726224434556, 0.0, 3.0},
Params{3, 9.004078879111557, 0.3331823321716628, 0.0, 3.0},
Params{3, 5.535389480500157, 0.5419672835250847, 0.0, 3.0},
Params{3, 6.3437241173874845, 0.4729083334152747, 0.0, 3.0},
Params{3, 1.9141611391147766, 1.567266171429737, 1.0, 1.0858388608852234},
Params{2, 5.0901583917529525, 0.3929150816289704, 0.0, 2.0},
Params{2, 9.004078879111557, 0.22212155478110854, 0.0, 2.0},
Params{2, 5.535389480500157, 0.3613115223500565, 0.0, 2.0},
Params{2, 6.3437241173874845, 0.3152722222768498, 0.0, 2.0},
Params{2, 1.9141611391147766, 1.0448441142864913, 1.0, 0.08583886088522341},
Params{1, 5.0901583917529525, 0.1964575408144852, 0.0, 1.0},
Params{1, 9.004078879111557, 0.11106077739055427, 0.0, 1.0},
Params{1, 5.535389480500157, 0.18065576117502824, 0.0, 1.0},
Params{1, 6.3437241173874845, 0.1576361111384249, 0.0, 1.0},
Params{1, 1.9141611391147766, 0.5224220571432456, 0.0, 1.0},
Params{0, 5.0901583917529525, 0.0, 0.0, 0.0},
Params{0, 9.004078879111557, 0.0, 0.0, 0.0},
Params{0, 5.535389480500157, 0.0, 0.0, 0.0},
Params{0, 6.3437241173874845, 0.0, 0.0, 0.0},
Params{0, 1.9141611391147766, 0.0, 0.0, 0.0},
Params{-1, 5.0901583917529525, -0.1964575408144852, -1.0, 4.0901583917529525},
Params{-1, 9.004078879111557, -0.11106077739055427, -1.0, 8.004078879111557},
Params{-1, 5.535389480500157, -0.18065576117502824, -1.0, 4.535389480500157},
Params{-1, 6.3437241173874845, -0.1576361111384249, -1.0, 5.3437241173874845},
Params{-1, 1.9141611391147766, -0.5224220571432456, -1.0, 0.9141611391147766},
Params{-2, 5.0901583917529525, -0.3929150816289704, -1.0, 3.0901583917529525},
Params{-2, 9.004078879111557, -0.22212155478110854, -1.0, 7.004078879111557},
Params{-2, 5.535389480500157, -0.3613115223500565, -1.0, 3.5353894805001573},
Params{-2, 6.3437241173874845, -0.3152722222768498, -1.0, 4.3437241173874845},
Params{-2, 1.9141611391147766, -1.0448441142864913, -2.0, 1.8283222782295532},
Params{-3, 5.0901583917529525, -0.5893726224434556, -1.0, 2.0901583917529525},
Params{-3, 9.004078879111557, -0.3331823321716628, -1.0, 6.004078879111557},
Params{-3, 5.535389480500157, -0.5419672835250847, -1.0, 2.5353894805001573},
Params{-3, 6.3437241173874845, -0.4729083334152747, -1.0, 3.3437241173874845},
Params{-3, 1.9141611391147766, -1.567266171429737, -2.0, 0.8283222782295532},
};
template <class Params>
constexpr inline auto division_params_float_int = std::array{
Params{1.4179697046156896, 3, 0.4726565682052299, 0.0, 1.4179697046156896},
Params{1.4179697046156896, 2, 0.7089848523078448, 0.0, 1.4179697046156896},
Params{1.4179697046156896, 1, 1.4179697046156896, 1.0, 0.4179697046156896},
Params{1.4179697046156896, 0, INFINITY, NAN, NAN},
Params{1.4179697046156896, -1, -1.4179697046156896, -2.0, -0.5820302953843104},
Params{1.4179697046156896, -2, -0.7089848523078448, -1.0, -0.5820302953843104},
Params{1.4179697046156896, -3, -0.4726565682052299, -1.0, -1.5820302953843104},
Params{-6.2104396591910955, 3, -2.0701465530636987, -3.0, 2.7895603408089045},
Params{-6.2104396591910955, 2, -3.1052198295955478, -4.0, 1.7895603408089045},
Params{-6.2104396591910955, 1, -6.2104396591910955, -7.0, 0.7895603408089045},
Params{-6.2104396591910955, 0, -INFINITY, NAN, NAN},
Params{-6.2104396591910955, -1, 6.2104396591910955, 6.0, -0.21043965919109553},
Params{-6.2104396591910955, -2, 3.1052198295955478, 3.0, -0.21043965919109553},
Params{-6.2104396591910955, -3, 2.0701465530636987, 2.0, -0.21043965919109553},
Params{6.773820110505227, 3, 2.2579400368350755, 2.0, 0.7738201105052269},
Params{6.773820110505227, 2, 3.3869100552526135, 3.0, 0.7738201105052269},
Params{6.773820110505227, 1, 6.773820110505227, 6.0, 0.7738201105052269},
Params{6.773820110505227, 0, INFINITY, NAN, NAN},
Params{6.773820110505227, -1, -6.773820110505227, -7.0, -0.22617988949477308},
Params{6.773820110505227, -2, -3.3869100552526135, -4.0, -1.226179889494773},
Params{6.773820110505227, -3, -2.2579400368350755, -3.0, -2.226179889494773},
Params{-5.4145737749496465, 3, -1.8048579249832155, -2.0, 0.5854262250503535},
Params{-5.4145737749496465, 2, -2.7072868874748233, -3.0, 0.5854262250503535},
Params{-5.4145737749496465, 1, -5.4145737749496465, -6.0, 0.5854262250503535},
Params{-5.4145737749496465, 0, -INFINITY, NAN, NAN},
Params{-5.4145737749496465, -1, 5.4145737749496465, 5.0, -0.41457377494964653},
Params{-5.4145737749496465, -2, 2.7072868874748233, 2.0, -1.4145737749496465},
Params{-5.4145737749496465, -3, 1.8048579249832155, 1.0, -2.4145737749496465},
Params{-8.939133322815948, 3, -2.979711107605316, -3.0, 0.06086667718405181},
Params{-8.939133322815948, 2, -4.469566661407974, -5.0, 1.0608666771840518},
Params{-8.939133322815948, 1, -8.939133322815948, -9.0, 0.06086667718405181},
Params{-8.939133322815948, 0, -INFINITY, NAN, NAN},
Params{-8.939133322815948, -1, 8.939133322815948, 8.0, -0.9391333228159482},
Params{-8.939133322815948, -2, 4.469566661407974, 4.0, -0.9391333228159482},
Params{-8.939133322815948, -3, 2.979711107605316, 2.0, -2.939133322815948},
};
template <class Params>
constexpr inline auto division_params_float_float = std::array{
Params{-4.813167090568173, -1.1838988203048046, 4.065522330133739, 4.0, -0.0775718093489548},
Params{-4.813167090568173, -3.303221766489739, 1.457112913034301, 1.0, -1.5099453240784344},
Params{-4.813167090568173, 4.489710633473784, -1.072043943028935, -2.0, 4.166254176379395},
Params{-4.813167090568173, -8.957506447795433, 0.5373333660008429, 0.0, -4.813167090568173},
Params{-4.813167090568173, 2.289219069315525, -2.1025366925705837, -3.0, 2.0544901173784016},
Params{2.4755338036308743, -1.1838988203048046, -2.09100115750899, -3.0, -1.0761626572835397},
Params{2.4755338036308743, -3.303221766489739, -0.7494300954130517, -1.0, -0.8276879628588647},
Params{2.4755338036308743, 4.489710633473784, 0.5513793662277743, 0.0, 2.4755338036308743},
Params{2.4755338036308743, -8.957506447795433, -0.27636416652986473, -1.0, -6.481972644164559},
Params{2.4755338036308743, 2.289219069315525, 1.0813879007093268, 1.0, 0.18631473431534928},
Params{-7.261693055773522, -1.1838988203048046, 6.1337108638252875, 6.0, -0.1583001339446941},
Params{-7.261693055773522, -3.303221766489739, 2.198366797361705, 2.0, -0.655249522794044},
Params{-7.261693055773522, 4.489710633473784, -1.6174078127959433, -2.0, 1.7177282111740464},
Params{-7.261693055773522, -8.957506447795433, 0.8106824257503856, 0.0, -7.261693055773522},
Params{-7.261693055773522, 2.289219069315525, -3.172126754100805, -4.0, 1.895183221488578},
Params{-6.163575935421253, -1.1838988203048046, 5.206167815788843, 5.0, -0.24408183389722993},
Params{-6.163575935421253, -3.303221766489739, 1.8659285906713885, 1.0, -2.860354168931514},
Params{-6.163575935421253, 4.489710633473784, -1.3728225354809478, -2.0, 2.815845331526315},
Params{-6.163575935421253, -8.957506447795433, 0.6880905943347878, 0.0, -6.163575935421253},
Params{-6.163575935421253, 2.289219069315525, -2.6924360442551083, -3.0, 0.7040812725253218},
Params{0.19044096358896745, -1.1838988203048046, -0.16085915478819113, -1.0, -0.9934578567158372},
Params{0.19044096358896745, -3.303221766489739, -0.05765309659827801, -1.0, -3.1127808029007715},
Params{0.19044096358896745, 4.489710633473784, 0.04241720216200643, 0.0, 0.19044096358896745},
Params{0.19044096358896745, -8.957506447795433, -0.021260488585619453, -1.0, -8.767065484206466},
Params{0.19044096358896745, 2.289219069315525, 0.08319036222510115, 0.0, 0.19044096358896745},
};
} // namespace
// clang-format on
