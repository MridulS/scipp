name: Release

on:
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}  # required for conda env

jobs:
  build_conda:
    name: Package build (${{ matrix.os }}, py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.8"]
        #os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        #python-version: ["3.8", "3.9"]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0  # history required so cmake can determine version

      - uses: conda-incubator/setup-miniconda@v2
      - run: conda install --yes conda-build
      - run: conda build --channel conda-forge --python=${{ matrix.python-version }} --override-channels --output-folder conda/package --token ${{ secrets.ANACONDATOKEN }} --user scipp --label staging conda

  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0  # history required so cmake can determine version

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/*.tar.gz

  build_wheels:
    name: Wheels on ${{ matrix.os }}
    # TODO remove
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0  # history required so cmake can determine version

    - uses: pypa/cibuildwheel@v2.3.1
      env:
        MACOSX_DEPLOYMENT_TARGET: "10.15"

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: wheelhouse/*.whl

  docs:
    name: Build documentation
    needs: build_conda
    runs-on: ubuntu-latest
    env:
      DOCS_HTML_DIR: ${{ github.workspace }}/docs_html
    steps:
      - uses: actions/checkout@v2  # Need to checkout repo so github-pages-deploy-action works
      - name: Setup Mambaforge and dev env
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: latest
          miniforge-variant: Mambaforge
          python-version: "3.8"
          environment-file: developer-extra.yml
          activate-environment: developer-extra
          auto-activate-base: false
      - run: mamba install --yes -c scipp/label/staging scipp
      - run: cmake --build --preset package-docs
      - uses: actions/upload-artifact@v2
        with:
          name: html
          path: build/html/

  upload_all:
    name: Deploy docs and packages
    needs: [docs, build_sdist]
    #needs: [docs, build_sdist, build_wheels]
    runs-on: ubuntu-latest
    #if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v2  # Need to checkout repo so github-pages-deploy-action works
      - uses: actions/download-artifact@v2
      - run: ls -R

      - run: cp -r html html/release/${{ github.ref_name }}
      - uses: JamesIves/github-pages-deploy-action@v4.2.3
        with:
          repository-name: scipp/scipp.github.io
          branch: master
          folder: html
          single-commit: true
          clean-exclude: release
          ssh-key: ${{ secrets.GH_PAGES_DEPLOY_KEY }}

      # Change conda packages labels from staging to main
      - uses: conda-incubator/setup-miniconda@v2
      - run: conda install -c conda-forge --yes anaconda-client
      #- run: anaconda --token ${{ secrets.ANACONDATOKEN }} move --from-label staging --to-label main scipp/scipp/${{ github.ref_name }}

      - uses: actions/setup-python@v2

        #- uses: pypa/gh-action-pypi-publish@v1.5.0
        #  with:
        #    user: __token__
        #    password: ${{ secrets.PYPI_TOKEN }}
